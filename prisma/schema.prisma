// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  profile   Profile?
  jobs      Career[]
  skills    Skill[]
  schedules Schedule[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Job {
  id             String   @id @default(cuid())
  companyName    String
  link           String
  description    String
  role           String
  skills         String[]
  courses        String[]
  experience     Int
  location       String
  salary         Int
  contactDetails String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Profile {
  id             String   @id @default(cuid())
  studentNumber  String
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  phoneNumber    String
  course         String
  yearOfGraduate String
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?  @unique
}

model Career {
  id           String   @id @default(cuid())
  companyName  String
  position     String
  startYear    DateTime
  endYear      DateTime
  projectsDone String[]
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
}

model Skill {
  id     String  @id @default(cuid())
  name   String
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Schedule {
  id        String   @id @default(cuid())
  date      DateTime
  documents String[]
  status    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  link        String?
  image       String?
}
